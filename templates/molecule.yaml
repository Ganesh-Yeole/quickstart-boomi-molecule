---
AWSTemplateFormatVersion: "2010-09-09"
Description: Boomi Atom Installation Script. This creates a VPC, Public Subnets and Private Subnets, and stages a Dell Boomi Molecule.
Parameters:
  KeyPairName:
    Description: Keyname for access to EC2 Instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing Keyname
#  BastionInstanceType:
#    Description: Bastion Host for AWS environment
#    Type: String
#    Default: t3.medium
#    AllowedValues:
#      - t2.medium
#      - t2.large
#      - t3.medium
#      - t3.large
  HeadMoleculeInstanceType:
    Description: Boomi Host Instance Type
    Type: String
    Default: m5.xlarge
    AllowedValues:
      - m4.xlarge
      - m5.xlarge
      - r4.xlarge
      - r5.xlarge
  NodeInstanceType:
    Description: Boomi Host Instance Type
    Type: String
    Default: m5.xlarge
    AllowedValues:
      - m4.xlarge
      - m5.xlarge
      - r4.xlarge
      - r5.xlarge
#  BastionEBSVolume:
#     Description: Boomi Bastion Host EBS Volume Size (Can be 1GiB to 16TiB. Size listed in GiB)
#     Type: Number
#     Default: 10

  MoleculeEBSVolume:
     Description: Boomi Head Molecule Host EBS Volume Size (Can be 1GiB to 16TiB. Size listed in GiB)
     Type: Number
     Default: 100

  EnvironmentName:
    Description: A Name that will be prefixed to resource names
    Type: String
    Default: Boomi

#  VPCID:
#    Description: Please enter the IP Range (CIDR notation) for this VPCID
#    Type: String
#    Default: 172.30.0.0/16

#  PublicSubnet1ID:
#    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
#    Type: String
#    Default: 172.30.1.0/27
#
#  PublicSubnet2ID:
#    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
#    Type: String
#    Default: 172.30.1.32/27
#
#  PrivateSubnet1ID:
#    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
#    Type: String
#    Default: 172.30.5.0/24
#
#  PrivateSubnet2ID:
#    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
#    Type: String
#    Default: 172.30.6.0/24
  VPCID:
    Type: String
  PublicSubnet1ID:
    Type: String
  PublicSubnet2ID:
    Type: String
  PrivateSubnet1ID:
    Type: String
  PrivateSubnet2ID:
    Type: String
  BoomiUsername:
    Description: Please enter your Boomi User Name
    Type: String
  BoomiPassword:
    Description: Please enter your Boomi Account Password
    Type: String
    NoEcho: true
  BoomiAccountID:
    Description: Please enter your Boomi Account ID
    Type: String
    Default: aws-XKO5OZ
  MoleculeSharedDir:
    Description: Please enter a shared Directory for Molecules
    Type: String
    Default: /mnt/molecule
  MoleculeLocalPath:
    Description: Please enter a local Path for the Molecule Install
    Type: String
    Default: /opt/molecule/local/
  VlocalTempPath:
    Description: Please enter a local Temp Path for your Molecule Install
    Type: String
    Default: /tmp
  MoleculeInstanceName:
    Description: Please enter a name for your Boomi Instance
    Type: String
    Default: molecule1
  Encryption:
    Description: EFS volumes can be encrypted. Please select either "yes" or "no"
    Type: String
    Default: yes
    AllowedValues:
      - yes
      - no
  PerformanceMode:
    Description: Choose a performance mode for your EFS volume
    Type: String
    Default: generalPurpose
    AllowedValues:
      - generalPurpose
      - maxIO
  ProvisionedThroughputInMiBps:
    Description: Select the Provisioned Throughput value for your EFS volume
    Type: Number
    Default: 10
  ThroughputMode:
   Description: Select the throughput mode for your EFS Volume
   Type: String
   Default: provisioned
   AllowedValues:
      - provisioned
      - bursting
  AutoScalingGroupName:
      Description: The name of the AutoScaling Group
      Type: String
      Default: Boomi-ASG
  LoadBalancerName:
      Description: The name of the Load Balancer
      Type: String
      Default: Molecule-LB
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Network Configuration"
        Parameters:
         - EnvironmentName
         - VPCID
         - PublicSubnet1ID
         - PublicSubnet2ID
         - PrivateSubnet1ID
         - PrivateSubnet2ID
      - 
        Label: 
          default: "Amazon EC2 Configuration"
        Parameters:
          - KeyPairName
          - LoadBalancerName
          - AutoScalingGroupName
          - MoleculeEBSVolume
      - 
        Label:
          default: "Boomi Atom Node Sizing"
        Parameters:
          - HeadMoleculeInstanceType
          - NodeInstanceType
      -
        Label:
          default: "Dell Boomi Molecule Configuration"
        Parameters:
         - MoleculeInstanceName
         - MoleculeLocalPath
         - VlocalTempPath
         - BoomiAccountID
         - BoomiUsername
         - BoomiPassword
         - MoleculeSharedDir
         - dir

      -
        Label:
          default: "Amazon EFS Configuration"
        Parameters:
          - Encryption
          - PerformanceMode
          - ThroughputMode
          - ProvisionedThroughputInMibps
Mappings:
  AWSAMIRegionMap:
    us-east-1:
      "AMZNLINUXHVM": "ami-0ff8a91507f77f867"
    us-east-2:
      "AMZNLINUXHVM": "ami-0ebbf2179e615c338"
      "RedHat": "ami-05220ffa0e7fce3d1"
      "ubuntu": "ami-0c55b159cbfafe1f0"
    us-west-2:
      "AMZNLINUXHVM": "ami-a0cfeed8"

Resources:
  # TODO: SUBMODULE
#  VPC:
#    Type: AWS::EC2::VPC
#    Properties:
#      CidrBlock:
#        Ref: VPCID
#      EnableDnsSupport: true
#      EnableDnsHostnames: true
#      InstanceTenancy: default
#
#  InternetGateway:
#    Type: AWS::EC2::InternetGateway
#    Properties:
#      Tags:
#        - Key: Name
#          Value:
#            Ref: EnvironmentName
#
#  InternetGatewayAttachment:
#    Type: AWS::EC2::VPCGatewayAttachment
#    Properties:
#      InternetGatewayId:
#        Ref: InternetGateway
#      VpcId:
#        !Ref VPCID
#
#  PublicSubnet1:
#    Type: AWS::EC2::Subnet
#    Properties:
#      VpcId:
#        !Ref VPCID
#      AvailabilityZone: !Select [ 0, !GetAZs '' ]
#      CidrBlock:
#        Ref: PublicSubnet1ID
#      MapPublicIpOnLaunch: true
#      Tags:
#        - Key: Name
#          Value: !Sub ${EnvironmentName} Public Subnet
#
#  PublicSubnet2:
#    Type: AWS::EC2::Subnet
#    Properties:
#      VpcId:
#        !Ref VPCID
#      AvailabilityZone: !Select [ 1, !GetAZs '' ]
#      CidrBlock:
#        Ref: PublicSubnet2ID
#      MapPublicIpOnLaunch: true
#      Tags:
#        - Key: Name
#          Value: !Sub ${EnvironmentName} Public Subnet
#
#  PrivateSubnet1:
#    Type: AWS::EC2::Subnet
#    Properties:
#      VpcId:
#        !Ref VPCID
#      AvailabilityZone: !Select [ 0, !GetAZs '' ]
#      CidrBlock:
#        Ref: PrivateSubnet1IDID
#      MapPublicIpOnLaunch: false
#      Tags:
#        - Key: Name
#          Value: !Sub ${EnvironmentName} Private Subnet
#
#  PrivateSubnet2:
#    Type: AWS::EC2::Subnet
#    Properties:
#      VpcId:
#        !Ref VPCID
#      AvailabilityZone: !Select [ 1, !GetAZs '' ]
#      CidrBlock:
#        Ref: PrivateSubnet2ID
#      MapPublicIpOnLaunch: false
#      Tags:
#        - Key: Name
#          Value: !Sub ${EnvironmentName} Private Subnet
#
#  NatGateway1EIP:
#      Type: AWS::EC2::EIP
#      DependsOn: InternetGatewayAttachment
#      Properties:
#          Domain: vpc
#
#  NatGateway1:
#      Type: AWS::EC2::NatGateway
#      Properties:
#          AllocationId: !GetAtt NatGateway1EIP.AllocationId
#          SubnetId: !Ref PublicSubnet1
#
#  NatGateway2EIP:
#      Type: AWS::EC2::EIP
#      DependsOn: InternetGatewayAttachment
#      Properties:
#          Domain: vpc
#
#  NatGateway2:
#      Type: AWS::EC2::NatGateway
#      Properties:
#          AllocationId: !GetAtt NatGateway2EIP.AllocationId
#          SubnetId: !Ref PublicSubnet2
#
#  PublicRouteTable:
#      Type: AWS::EC2::RouteTable
#      Properties:
#          VpcId: !Ref VPCID
#          Tags:
#            - Key: Name
#              Value: !Sub ${EnvironmentName} Public Routes
#
#  DefaultPublicRoute:
#      Type: AWS::EC2::Route
#      DependsOn: InternetGatewayAttachment
#      Properties:
#          RouteTableId: !Ref PublicRouteTable
#          DestinationCidrBlock: 0.0.0.0/0
#          GatewayId: !Ref InternetGateway
#
#  PublicSubnet1RouteTableAssociation:
#      Type: AWS::EC2::SubnetRouteTableAssociation
#      Properties:
#          RouteTableId: !Ref PublicRouteTable
#          SubnetId: !Ref PublicSubnet1
#
#  PublicSubnet2RouteTableAssociation:
#      Type: AWS::EC2::SubnetRouteTableAssociation
#      Properties:
#          RouteTableId: !Ref PublicRouteTable
#          SubnetId: !Ref PublicSubnet2
#
#  PrivateRouteTable1:
#      Type: AWS::EC2::RouteTable
#      Properties:
#          VpcId: !Ref VPCID
#          Tags:
#            - Key: Name
#              Value: !Sub ${EnvironmentName} Private Routes (AZ1)
#
#
#  DefaultPrivateRoute1:
#      Type: AWS::EC2::Route
#      Properties:
#          RouteTableId: !Ref PrivateRouteTable1
#          DestinationCidrBlock: 0.0.0.0/0
#          NatGatewayId: !Ref NatGateway1
#
#  PrivateSubnet1RouteTableAssociation:
#      Type: AWS::EC2::SubnetRouteTableAssociation
#      Properties:
#          RouteTableId: !Ref PrivateRouteTable1
#          SubnetId: Ref: PrivateSubnet1ID
#
#  PrivateSubnet2RouteTableAssociation:
#      Type: AWS::EC2::SubnetRouteTableAssociation
#      Properties:
#          RouteTableId: !Ref PrivateRouteTable1
#          SubnetId: !Ref PrivateSubnet2

  # TODO: Parameter
  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: boomi-bastion
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: BastionSG
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: boomi-elb
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: LoadBalancerSG
      SecurityGroupIngress:
      - FromPort: 9090
        IpProtocol: tcp
        CidrIp: !Ref PrivateSubnet1ID
        ToPort: 9090
      - FromPort: 9090
        IpProtocol: tcp
        CidrIp: !Ref PrivateSubnet2ID
        ToPort: 9090
  BoomiSecurityGroup:
    DependsOn: [ BastionSecurityGroup, LoadBalancerSecurityGroup]
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: boomi
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: BoomiSG
      SecurityGroupIngress:
        - FromPort: 22
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref BastionSecurityGroup
          ToPort: 22
        - FromPort: 22
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          ToPort: 22
        - FromPort: 9090
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          ToPort: 9090
        - IpProtocol: tcp
          FromPort: '2049'
          ToPort: '2049'
          CidrIp: !Ref PrivateSubnet1ID
        - IpProtocol: tcp
          FromPort: '2049'
          ToPort: '2049'
          CidrIp: !Ref PrivateSubnet2ID
  BoomiUnicastSG:
     Type: 'AWS::EC2::SecurityGroup'
     Properties:
       GroupDescription: Boomi-Unicast
       VpcId: !Ref VPCID
       Tags:
        - Key: Name
          Value: Boomi-Unicast-SG
       SecurityGroupIngress:
        - FromPort: '-1'
          IpProtocol: '-1'
          SourceSecurityGroupId: !Ref BoomiSecurityGroup
          ToPort: '-1'
  MoleculeSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: moleculeSG
            VpcId: 
                !Ref VPCID
            Tags:
              - Key: Name
                Value: MoleculeSG
            SecurityGroupIngress:
              - IpProtocol: '-1'
                FromPort: '-1'
                ToPort: '-1'
                SourceSecurityGroupId: !Ref BoomiSecurityGroup
  MountTargetSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: MountTargetSecurityGroup
            VpcId: !Ref VPCID
            Tags:
              - Key: Name
                Value: MountTargetSecurityGroup
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: '22'
                ToPort: '22'
                CidrIp: !Ref PrivateSubnet1ID
              - IpProtocol: tcp
                FromPort: '22'
                ToPort: '22'
                CidrIp: !Ref PrivateSubnet2ID
              - IpProtocol: tcp
                FromPort: '2049'
                ToPort: '2049'
                CidrIp: !Ref PrivateSubnet1ID
              - IpProtocol: tcp
                FromPort: '2049'
                ToPort: '2049'
                CidrIp: !Ref PrivateSubnet2ID
            SecurityGroupEgress:
              - IpProtocol: -1
                CidrIp: 0.0.0.0/0
  MountTarget1: 
        Type: AWS::EFS::MountTarget
        DependsOn: MountTargetSecurityGroup
        Properties: 
            FileSystemId: 
              Ref: "EFSFilesystem"
            SubnetId: 
              Ref: PrivateSubnet1ID
            SecurityGroups: 
             - 
              Ref: "MountTargetSecurityGroup"
  MountTarget2: 
        Type: AWS::EFS::MountTarget
        DependsOn: MountTargetSecurityGroup
        Properties: 
            FileSystemId: 
              Ref: "EFSFilesystem"
            SubnetId: !Ref PrivateSubnet2ID
            SecurityGroups: 
             - 
              Ref: "MountTargetSecurityGroup"

#  LaunchConfiguration:
#    DependsOn: [ NatGateway1, NatGateway2 ]
#    Type: 'AWS::AutoScaling::LaunchConfiguration'
#    Properties:
#      ImageId: !FindInMap
#       - AWSAMIRegionMap
#       - Ref: AWS::Region
#       - AMZNLINUXHVM
#      InstanceType:
#        Ref: BastionInstanceType
#      AssociatePublicIpAddress: "true"
#      SecurityGroups:
#        - !Ref BastionSecurityGroup
#      BlockDeviceMappings: 
#       - DeviceName: "/dev/xvda"
#         Ebs: 
#          VolumeType: "gp2"
#          DeleteOnTermination: "true"
#          VolumeSize:
#            Ref: "BastionEBSVolume"
#      KeyName:
#        Ref: KeyPairName
#
#  AutoScaling:
#    Type: 'AWS::AutoScaling::AutoScalingGroup'
#    Properties:
#      AutoScalingGroupName:
#          Ref: AutoScalingGroupName
#      VPCZoneIdentifier: [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]
#      LaunchConfigurationName: !Ref LaunchConfiguration
#      MinSize: '1'
#      MaxSize: '1'
#      DesiredCapacity: '1'
#      Cooldown: '300'
#      HealthCheckGracePeriod: '300'
#      HealthCheckType: EC2
#      Tags:
#        - PropagateAtLaunch: 'true'
#          Value: Bastion-Host
#          Key: Name

  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Join 
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action:
              - 'kms:*'
            Resource: '*'
  HeadMolecule:
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT15M"
    DependsOn: [ MountTarget1, MountTarget2, EFSFilesystem ]
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap
       - AWSAMIRegionMap
       - Ref: AWS::Region
       - AMZNLINUXHVM
      InstanceType:
        Ref: HeadMoleculeInstanceType
      NetworkInterfaces:
        - GroupSet:
            - !Ref BoomiSecurityGroup
            - !Ref BoomiUnicastSG
            - !Ref MoleculeSecurityGroup
          AssociatePublicIpAddress: 'false'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: Ref: PrivateSubnet1ID
      BlockDeviceMappings: 
       - DeviceName: "/dev/xvda"
         Ebs: 
          VolumeType: "gp2"
          DeleteOnTermination: "true"
          VolumeSize:
            Ref: "MoleculeEBSVolume"
      KeyName:
        Ref: KeyPairName
      Tags:
        - Value: HeadMolecule
          Key: Name
      UserData:
             Fn::Base64: !Sub |
               #!/bin/bash -x
               yum update -y
               yum install -y amazon-efs-utils
               echo JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk.x86_64 >> /home/ec2-user/.bash_profile
               echo "export PATH=$JAVA_HOME/bin:$PATH >> /home/ec2-user/.bash_profile"
               . ~/.bash_profile
               mkdir -p /usr/local/boomi/work
               chown ec2-user:ec2-user /usr/local/boomi/work
               cd /usr/local/boomi/work
               wget https://platform.boomi.com/atom/molecule_install64.sh
               chmod +x molecule_install64.sh
               chown ec2-user:ec2-user molecule_install64.sh
               mkdir -p ${MoleculeLocalPath}
               chown ec2-user:ec2-user ${MoleculeLocalPath}
               mkdir ${MoleculeSharedDir}
               chown -R ec2-user:ec2-user ${MoleculeSharedDir}
               sh -c 'echo "$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone).${EFSFilesystem}.efs.${AWS::Region}.amazonaws.com:/ ${MoleculeSharedDir} nfs4 defaults,vers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0" >> /etc/fstab'
               mount -a
               su - ec2-user
               ./molecule_install64.sh -q -console -Vusername=${BoomiUsername} -BoomiPassword=${BoomiPassword} -VatomName=${MoleculeInstanceName} -VaccountId=${BoomiAccountID} -VlocalPath=${MoleculeLocalPath} -VlocalTempPath=${MoleculeLocalTemp} -dir ${MoleculeSharedDir}
               sh -c 'echo com.boomi.container.cloudlet.clusterConfig=UNICAST >> ${MoleculeSharedDir}/Molecule_${MoleculeInstanceName}/conf/container.properties'
               sh -c 'echo com.boomi.container.cloudlet.initialHosts=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)[7800] >> ${MoleculeSharedDir}/Molecule_${MoleculeInstanceName}/conf/container.properties'
               chown -R ec2-user:ec2-user ${MoleculeSharedDir}/Molecule_${MoleculeInstanceName}/
               /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource HeadMolecule --region ${AWS::Region}
               ln -sf /mnt/molecule/Molecule_molecule1/jre/bin/java /usr/bin/java
               sleep 2m
               ${MoleculeSharedDir}/Molecule_${MoleculeInstanceName}/bin/atom stop
               sleep 2m
               sudo -u ec2-user bash -c '${MoleculeSharedDir}/Molecule_${MoleculeInstanceName}/bin/atom start'

  MoleculeNode1:
    DependsOn: [HeadMolecule ]
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap
       - AWSAMIRegionMap
       - Ref: AWS::Region
       - AMZNLINUXHVM
      InstanceType: !Ref NodeInstanceType
      NetworkInterfaces:
        - GroupSet:
            - !Ref BoomiSecurityGroup
            - !Ref BoomiUnicastSG
            - !Ref MoleculeSecurityGroup
          AssociatePublicIpAddress: 'false'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PrivateSubnet2ID
      BlockDeviceMappings: 
       - DeviceName: "/dev/xvda"
         Ebs: 
          VolumeType: "gp2"
          DeleteOnTermination: "true"
          VolumeSize:
            Ref: "MoleculeEBSVolume"
      KeyName:
        Ref: KeyPairName

      UserData:
       Fn::Base64: !Sub |

        #!/bin/bash -x
        yum update -y
        yum install -y amazon-efs-utils
        echo JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk.x86_64 >> /home/ec2-user/.bash_profile
        echo "export PATH=$JAVA_HOME/bin:$PATH >> /home/ec2-user/.bash_profile"
        . ~/.bash_profile
        mkdir -p ${MoleculeLocalPath}
        chown -R ec2-user:ec2-user ${MoleculeLocalPath}
        mkdir ${MoleculeSharedDir}
        chown ec2-user:ec2-user ${MoleculeSharedDir}
        sh -c 'echo "$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone).${EFSFilesystem}.efs.${AWS::Region}.amazonaws.com:/ ${MoleculeSharedDir} nfs4 defaults,vers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0" >> /etc/fstab'
        mount -a
        chown -R ec2-user:ec2-user ${MoleculeSharedDir}/Molecule_${MoleculeInstanceName}/
        chown ec2-user:ec2-user ${MoleculeSharedDir}/Molecule_${MoleculeInstanceName}/logs
        chmod 777 ${MoleculeSharedDir}/Molecule_${MoleculeInstanceName}/bin/views
        ./${MoleculeSharedDir}/Molecule_${MoleculeInstanceName}/bin/atom start
        ln -sf /mnt/molecule/Molecule_molecule1/jre/bin/java /usr/bin/java
        sleep 1m
        ${MoleculeSharedDir}/Molecule_${MoleculeInstanceName}/bin/atom stop
        sleep 1m
        sudo -u ec2-user bash -c '${MoleculeSharedDir}/Molecule_${MoleculeInstanceName}/bin/atom start'


      Tags:
        - Value: Molecule1
          Key: Name

  MoleculeNode2:
    DependsOn: HeadMolecule
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap
       - AWSAMIRegionMap
       - !Ref AWS::Region
       - AMZNLINUXHVM
      InstanceType: !Ref NodeInstanceType
      NetworkInterfaces:
        - GroupSet:
            - !Ref BoomiSecurityGroup
            - !Ref BoomiUnicastSG
            - !Ref MoleculeSecurityGroup
          AssociatePublicIpAddress: 'false'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PrivateSubnet1ID
      BlockDeviceMappings: 
       - DeviceName: "/dev/xvda"
         Ebs: 
          VolumeType: "gp2"
          DeleteOnTermination: "true"
          VolumeSize: !Ref "MoleculeEBSVolume"
      KeyName: !Ref KeyPairName

      UserData:
       Fn::Base64: !Sub |

        #!/bin/bash -x
        yum update -y
        yum install -y amazon-efs-utils
        echo JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk.x86_64 >> /home/ec2-user/.bash_profile
        echo "export PATH=$JAVA_HOME/bin:$PATH >> /home/ec2-user/.bash_profile"
        . ~/.bash_profile
        mkdir -p ${MoleculeLocalPath}
        chown -R ec2-user:ec2-user ${MoleculeLocalPath}
        mkdir ${MoleculeSharedDir}
        chown ec2-user:ec2-user ${MoleculeSharedDir}
        sh -c 'echo "$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone).${EFSFilesystem}.efs.${AWS::Region}.amazonaws.com:/ ${MoleculeSharedDir} nfs4 defaults,vers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0" >> /etc/fstab'
        mount -a
        chown -R ec2-user:ec2-user ${MoleculeSharedDir}/Molecule_${MoleculeInstanceName}/
        chown ec2-user:ec2-user ${MoleculeSharedDir}/Molecule_${MoleculeInstanceName}/logs
        chmod 777 ${MoleculeSharedDir}/Molecule_${MoleculeInstanceName}/bin/views
        ./${MoleculeSharedDir}/Molecule_${MoleculeInstanceName}/bin/atom start
        ln -sf /mnt/molecule/Molecule_molecule1/jre/bin/java /usr/bin/java
        sleep 1m
        ${MoleculeSharedDir}/Molecule_${MoleculeInstanceName}/bin/atom stop
        sleep 1m
        sudo -u ec2-user bash -c '${MoleculeSharedDir}/Molecule_${MoleculeInstanceName}/bin/atom start'

      Tags:
        - Value: Molecule2
          Key: Name

  MoleculeNode3:
    DependsOn: HeadMolecule
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap
       - AWSAMIRegionMap
       - !Ref AWS::Region
       - AMZNLINUXHVM
      InstanceType: !Ref NodeInstanceType
      NetworkInterfaces:
        - GroupSet:
            - !Ref BoomiSecurityGroup
            - !Ref BoomiUnicastSG
            - !Ref MoleculeSecurityGroup
          AssociatePublicIpAddress: 'false'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PrivateSubnet2ID
      BlockDeviceMappings: 
       - DeviceName: "/dev/xvda"
         Ebs: 
          VolumeType: "gp2"
          DeleteOnTermination: "true"
          VolumeSize: !Ref "MoleculeEBSVolume"
      KeyName: !Ref KeyPairName

      UserData:
       Fn::Base64: !Sub |

        #!/bin/bash -x
        yum update -y
        yum install -y amazon-efs-utils
        echo "export PATH=$JAVA_HOME/bin:$PATH >> /home/ec2-user/.bash_profile"
        . ~/.bash_profile
        mkdir -p ${MoleculeLocalPath}
        chown -R ec2-user:ec2-user ${MoleculeLocalPath}
        mkdir ${MoleculeSharedDir}
        chown ec2-user:ec2-user ${MoleculeSharedDir}
        sh -c 'echo "$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone).${EFSFilesystem}.efs.${AWS::Region}.amazonaws.com:/ ${MoleculeSharedDir} nfs4 defaults,vers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0" >> /etc/fstab'
        mount -a
        chown -R ec2-user:ec2-user ${MoleculeSharedDir}/Molecule_${MoleculeInstanceName}/
        chown ec2-user:ec2-user ${MoleculeSharedDir}/Molecule_${MoleculeInstanceName}/logs
        chmod 777 ${MoleculeSharedDir}/Molecule_${MoleculeInstanceName}/bin/views
        ./${MoleculeSharedDir}/Molecule_${MoleculeInstanceName}/bin/atom start
        ln -sf /mnt/molecule/Molecule_molecule1/jre/bin/java /usr/bin/java
        sleep 1m
        ${MoleculeSharedDir}/Molecule_${MoleculeInstanceName}/bin/atom stop
        sleep 1m
        sudo -u ec2-user bash -c '${MoleculeSharedDir}/Molecule_${MoleculeInstanceName}/bin/atom start'

      Tags:
        - Value: Molecule3
          Key: Name

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1ID
        - !Ref PublicSubnet2ID
      CrossZone: 'true'
      Listeners:
      - LoadBalancerPort: '9090'
        InstancePort: '9090'
        Protocol: TCP
      HealthCheck:
        Target: TCP:22
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Instances:
        - !Ref HeadMolecule
        - !Ref MoleculeNode1
        - !Ref MoleculeNode2
        - !Ref MoleculeNode3
  EFSFilesystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: !Ref Encryption
      PerformanceMode: !Ref PerformanceMode
      ProvisionedThroughputInMibps: !Ref ProvisionedThroughputInMiBps
      ThroughputMode: !Ref ThroughputMode
      KmsKeyId: !GetAtt 
        - KMSKey
        - Arn
Outputs:
  VPC:
    Description: The VPC
    Value: !Ref VPCID

